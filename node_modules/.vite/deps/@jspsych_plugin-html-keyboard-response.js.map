{
  "version": 3,
  "sources": ["../../@jspsych/plugin-html-keyboard-response/src/index.ts"],
  "sourcesContent": ["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-keyboard-response\",\n  parameters: {\n    /**\n     * The HTML string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * Any content here will be displayed below the stimulus.\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /**\n     * How long to show the stimulus.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /**\n     * How long to show trial before it ends.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /**\n     * If true, trial will end when subject makes a response.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-keyboard-response**\n *\n * jsPsych plugin for displaying a stimulus and getting a keyboard response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-keyboard-response/ html-keyboard-response plugin documentation on jspsych.org}\n */\nclass HtmlKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponsePlugin;\n"],
  "mappings": "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",
  "names": ["info"]
}

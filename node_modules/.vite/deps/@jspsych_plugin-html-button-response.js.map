{
  "version": 3,
  "sources": ["../../@jspsych/plugin-html-button-response/src/index.ts"],
  "sourcesContent": ["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-button-response\",\n  parameters: {\n    /** The HTML string to be displayed */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the label(s) for the button(s). */\n    choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Choices\",\n      default: undefined,\n      array: true,\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed under the button(s). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, then trial will end when user responds. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * html-button-response\n * jsPsych plugin for displaying a stimulus and getting a button response\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-button-response/ html-button-response plugin documentation on jspsych.org}\n */\nclass HtmlButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // display stimulus\n    var html = '<div id=\"jspsych-html-button-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    //display buttons\n    var buttons = [];\n    if (Array.isArray(trial.button_html)) {\n      if (trial.button_html.length == trial.choices.length) {\n        buttons = trial.button_html;\n      } else {\n        console.error(\n          \"Error in html-button-response plugin. The length of the button_html array does not equal the length of the choices array\"\n        );\n      }\n    } else {\n      for (var i = 0; i < trial.choices.length; i++) {\n        buttons.push(trial.button_html);\n      }\n    }\n    html += '<div id=\"jspsych-html-button-response-btngroup\">';\n    for (var i = 0; i < trial.choices.length; i++) {\n      var str = buttons[i].replace(/%choice%/g, trial.choices[i]);\n      html +=\n        '<div class=\"jspsych-html-button-response-button\" style=\"display: inline-block; margin:' +\n        trial.margin_vertical +\n        \" \" +\n        trial.margin_horizontal +\n        '\" id=\"jspsych-html-button-response-button-' +\n        i +\n        '\" data-choice=\"' +\n        i +\n        '\">' +\n        str +\n        \"</div>\";\n    }\n    html += \"</div>\";\n\n    //show prompt if there is one\n    if (trial.prompt !== null) {\n      html += trial.prompt;\n    }\n    display_element.innerHTML = html;\n\n    // start time\n    var start_time = performance.now();\n\n    // add event listeners to buttons\n    for (var i = 0; i < trial.choices.length; i++) {\n      display_element\n        .querySelector(\"#jspsych-html-button-response-button-\" + i)\n        .addEventListener(\"click\", (e) => {\n          var btn_el = e.currentTarget as HTMLButtonElement;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_response(choice);\n        });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.button,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-button-response-stimulus\").className +=\n        \" responded\";\n\n      // disable all the buttons after a response\n      var btns = document.querySelectorAll(\".jspsych-html-button-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        //btns[i].removeEventListener('click');\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-button-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(`div[data-choice=\"${data.response}\"] button`),\n        data.rt\n      );\n    }\n  }\n}\n\nexport default HtmlButtonResponsePlugin;\n"],
  "mappings": "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",
  "names": ["i"]
}

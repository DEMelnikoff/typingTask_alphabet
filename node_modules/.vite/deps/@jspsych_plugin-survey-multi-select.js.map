{
  "version": 3,
  "sources": ["../../@jspsych/plugin-survey-multi-select/src/index.ts"],
  "sourcesContent": ["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"survey-multi-select\",\n  parameters: {\n    /** Array containing one or more objects with parameters for the question(s) that should be shown on the page. */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      pretty_name: \"Questions\",\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          pretty_name: \"Prompt\",\n          default: undefined,\n        },\n        /** Array of multiple select options for this question. */\n        options: {\n          type: ParameterType.STRING,\n          pretty_name: \"Options\",\n          array: true,\n          default: undefined,\n        },\n        /** If true, then the question will be centered and options will be displayed horizontally. */\n        horizontal: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Horizontal\",\n          default: false,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Required\",\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          pretty_name: \"Question Name\",\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Randomize Question Order\",\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Preamble\",\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n    },\n    /** Message that will be displayed if one or more required questions is not answered. */\n    required_message: {\n      type: ParameterType.STRING,\n      pretty_name: \"Required message\",\n      default: \"You must choose at least one response for this question\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Allow autocomplete\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-multi-select**\n *\n * jsPsych plugin for presenting multiple choice survey questions with the ability to respond with more than one option\n *\n * @see {@link https://www.jspsych.org/plugins/jspsych-survey-multi-select/ survey-multi-select plugin documentation on jspsych.org}\n */\nclass SurveyMultiSelectPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var plugin_id_name = \"jspsych-survey-multi-select\";\n    var plugin_id_selector = \"#\" + plugin_id_name;\n    const _join = (...args: Array<string | number>) => args.join(\"-\");\n\n    // inject CSS for trial\n    var cssstr =\n      \".jspsych-survey-multi-select-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }\" +\n      \".jspsych-survey-multi-select-text span.required {color: darkred;}\" +\n      \".jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-text {  text-align: center;}\" +\n      \".jspsych-survey-multi-select-option { line-height: 2; }\" +\n      \".jspsych-survey-multi-select-horizontal .jspsych-survey-multi-select-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\n      \"label.jspsych-survey-multi-select-text input[type='checkbox'] {margin-right: 1em;}\";\n    display_element.innerHTML =\n      '<style id=\"jspsych-survey-multi-select-css\">' + cssstr + \"</style>\";\n\n    // form element\n    var trial_form_id = _join(plugin_id_name, \"form\");\n    display_element.innerHTML += '<form id=\"' + trial_form_id + '\"></form>';\n    var trial_form = display_element.querySelector<HTMLFormElement>(\"#\" + trial_form_id);\n    if (!trial.autocomplete) {\n      trial_form.setAttribute(\"autocomplete\", \"off\");\n    }\n    // show preamble text\n    var preamble_id_name = _join(plugin_id_name, \"preamble\");\n    if (trial.preamble !== null) {\n      trial_form.innerHTML +=\n        '<div id=\"' +\n        preamble_id_name +\n        '\" class=\"' +\n        preamble_id_name +\n        '\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n    // add multiple-select questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      var question_id = question_order[i];\n      // create question container\n      var question_classes = [_join(plugin_id_name, \"question\")];\n      if (question.horizontal) {\n        question_classes.push(_join(plugin_id_name, \"horizontal\"));\n      }\n\n      trial_form.innerHTML +=\n        '<div id=\"' +\n        _join(plugin_id_name, question_id) +\n        '\" data-name=\"' +\n        question.name +\n        '\" class=\"' +\n        question_classes.join(\" \") +\n        '\"></div>';\n\n      var question_selector = _join(plugin_id_selector, question_id);\n\n      // add question text\n      display_element.querySelector(question_selector).innerHTML +=\n        '<p id=\"survey-question\" class=\"' +\n        plugin_id_name +\n        '-text survey-multi-select\">' +\n        question.prompt +\n        \"</p>\";\n\n      // create option check boxes\n      for (var j = 0; j < question.options.length; j++) {\n        var option_id_name = _join(plugin_id_name, \"option\", question_id, j);\n\n        // add check box container\n        display_element.querySelector(question_selector).innerHTML +=\n          '<div id=\"' + option_id_name + '\" class=\"' + _join(plugin_id_name, \"option\") + '\"></div>';\n\n        // add label and question text\n        var form = document.getElementById(option_id_name);\n        var input_name = _join(plugin_id_name, \"response\", question_id);\n        var input_id = _join(plugin_id_name, \"response\", question_id, j);\n        var label = document.createElement(\"label\");\n        label.setAttribute(\"class\", plugin_id_name + \"-text\");\n        label.innerHTML = question.options[j];\n        label.setAttribute(\"for\", input_id);\n\n        // create checkboxes\n        var input = document.createElement(\"input\");\n        input.setAttribute(\"type\", \"checkbox\");\n        input.setAttribute(\"name\", input_name);\n        input.setAttribute(\"id\", input_id);\n        input.setAttribute(\"value\", question.options[j]);\n        form.appendChild(label);\n        label.insertBefore(input, label.firstChild);\n      }\n    }\n    // add submit button\n    trial_form.innerHTML += '<div class=\"fail-message\"></div>';\n    trial_form.innerHTML +=\n      '<button id=\"' +\n      plugin_id_name +\n      '-next\" class=\"' +\n      plugin_id_name +\n      ' jspsych-btn\">' +\n      trial.button_label +\n      \"</button>\";\n\n    // validation check on the data first for custom validation handling\n    // then submit the form\n    display_element\n      .querySelector(\"#jspsych-survey-multi-select-next\")\n      .addEventListener(\"click\", () => {\n        for (var i = 0; i < trial.questions.length; i++) {\n          if (trial.questions[i].required) {\n            if (\n              display_element.querySelector(\n                \"#jspsych-survey-multi-select-\" + i + \" input:checked\"\n              ) == null\n            ) {\n              display_element\n                .querySelector<HTMLInputElement>(\"#jspsych-survey-multi-select-\" + i + \" input\")\n                .setCustomValidity(trial.required_message);\n            } else {\n              display_element\n                .querySelector<HTMLInputElement>(\"#jspsych-survey-multi-select-\" + i + \" input\")\n                .setCustomValidity(\"\");\n            }\n          }\n        }\n        trial_form.reportValidity();\n      });\n\n    trial_form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      var has_response = [];\n      for (var index = 0; index < trial.questions.length; index++) {\n        var match = display_element.querySelector(\"#jspsych-survey-multi-select-\" + index);\n        var val = [];\n        var inputboxes = match.querySelectorAll<HTMLInputElement>(\"input[type=checkbox]:checked\");\n        for (var j = 0; j < inputboxes.length; j++) {\n          var currentChecked = inputboxes[j];\n          val.push(currentChecked.value);\n        }\n        var id = \"Q\" + index;\n        var obje = {};\n        var name = id;\n        if (match.attributes[\"data-name\"].value !== \"\") {\n          name = match.attributes[\"data-name\"].value;\n        }\n        obje[name] = val;\n        Object.assign(question_data, obje);\n        if (val.length == 0) {\n          has_response.push(false);\n        } else {\n          has_response.push(true);\n        }\n      }\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      let n_answers;\n      if (q.required) {\n        n_answers = this.jsPsych.randomization.randomInt(1, q.options.length);\n      } else {\n        n_answers = this.jsPsych.randomization.randomInt(0, q.options.length);\n      }\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      const selections = this.jsPsych.randomization.sampleWithoutReplacement(q.options, n_answers);\n      question_data[name] = selections;\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers: [string, []][] = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      for (const a of answers[i][1]) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(\n            `#jspsych-survey-multi-select-response-${i}-${trial.questions[i].options.indexOf(a)}`\n          ),\n          ((data.rt - 1000) / answers.length) * (i + 1)\n        );\n      }\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-multi-select-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyMultiSelectPlugin;\n"],
  "mappings": "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",
  "names": ["i", "j"]
}

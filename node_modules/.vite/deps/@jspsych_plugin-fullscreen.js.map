{
  "version": 3,
  "sources": ["../../@jspsych/plugin-fullscreen/src/index.ts"],
  "sourcesContent": ["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"fullscreen\",\n  parameters: {\n    /** If true, experiment will enter fullscreen mode. If false, the browser will exit fullscreen mode. */\n    fullscreen_mode: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Fullscreen mode\",\n      default: true,\n      array: false,\n    },\n    /** HTML content to display above the button to enter fullscreen mode */\n    message: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Message\",\n      default:\n        \"<p>The experiment will switch to full screen mode when you press the button below</p>\",\n      array: false,\n    },\n    /** The text that appears on the button to enter fullscreen */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n      array: false,\n    },\n    /** The length of time to delay after entering fullscreen mode before ending the trial. */\n    delay_after: {\n      type: ParameterType.INT,\n      pretty_name: \"Delay after\",\n      default: 1000,\n      array: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **fullscreen**\n *\n * jsPsych plugin for toggling fullscreen mode in the browser\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-fullscreen/ fullscreen plugin documentation on jspsych.org}\n */\nclass FullscreenPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // check if keys are allowed in fullscreen mode\n    var keyboardNotAllowed = typeof Element !== \"undefined\" && \"ALLOW_KEYBOARD_INPUT\" in Element;\n    if (keyboardNotAllowed) {\n      // This is Safari, and keyboard events will be disabled. Don't allow fullscreen here.\n      // do something else?\n      this.endTrial(display_element, false, trial);\n    } else {\n      if (trial.fullscreen_mode) {\n        this.showDisplay(display_element, trial);\n      } else {\n        this.exitFullScreen();\n        this.endTrial(display_element, true, trial);\n      }\n    }\n  }\n\n  private showDisplay(display_element, trial) {\n    display_element.innerHTML = `\n      ${trial.message}\n      <button id=\"jspsych-fullscreen-btn\" class=\"jspsych-btn\">${trial.button_label}</button>\n    `;\n    display_element.querySelector(\"#jspsych-fullscreen-btn\").addEventListener(\"click\", () => {\n      this.enterFullScreen();\n      this.endTrial(display_element, true, trial);\n    });\n  }\n\n  private endTrial(display_element, success, trial) {\n    display_element.innerHTML = \"\";\n\n    this.jsPsych.pluginAPI.setTimeout(() => {\n      var trial_data = {\n        success: success,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    }, trial.delay_after);\n  }\n\n  private enterFullScreen() {\n    var element = document.documentElement;\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element[\"mozRequestFullScreen\"]) {\n      element[\"mozRequestFullScreen\"]();\n    } else if (element[\"webkitRequestFullscreen\"]) {\n      element[\"webkitRequestFullscreen\"]();\n    } else if (element[\"msRequestFullscreen\"]) {\n      element[\"msRequestFullscreen\"]();\n    }\n  }\n\n  private exitFullScreen() {\n    if (\n      document.fullscreenElement ||\n      document[\"mozFullScreenElement\"] ||\n      document[\"webkitFullscreenElement\"]\n    ) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document[\"msExitFullscreen\"]) {\n        document[\"msExitFullscreen\"]();\n      } else if (document[\"mozCancelFullScreen\"]) {\n        document[\"mozCancelFullScreen\"]();\n      } else if (document[\"webkitExitFullscreen\"]) {\n        document[\"webkitExitFullscreen\"]();\n      }\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      success: true,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    if (data.success === false) {\n      this.endTrial(display_element, false, trial);\n    } else {\n      this.trial(display_element, trial);\n      load_callback();\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\"#jspsych-fullscreen-btn\"),\n        this.jsPsych.randomization.sampleExGaussian(1000, 100, 1 / 200, true)\n      );\n    }\n  }\n}\n\nexport default FullscreenPlugin;\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../@jspsych/plugin-survey-likert/src/index.ts"],
  "sourcesContent": ["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"survey-likert\",\n  parameters: {\n    /** Array containing one or more objects with parameters for the question(s) that should be shown on the page. */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      pretty_name: \"Questions\",\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          pretty_name: \"Prompt\",\n          default: undefined,\n        },\n        /** Array of likert labels to display for this question. */\n        labels: {\n          type: ParameterType.STRING,\n          array: true,\n          pretty_name: \"Labels\",\n          default: undefined,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Required\",\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          pretty_name: \"Question Name\",\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Randomize Question Order\",\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Preamble\",\n      default: null,\n    },\n    /** Width of the likert scales in pixels. */\n    scale_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Scale width\",\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Allow autocomplete\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-likert**\n *\n * jsPsych plugin for gathering responses to questions on a likert scale\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-survey-likert/ survey-likert plugin documentation on jspsych.org}\n */\nclass SurveyLikertPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    if (trial.scale_width !== null) {\n      var w = trial.scale_width + \"px\";\n    } else {\n      var w = \"100%\";\n    }\n\n    var html = \"\";\n    // inject CSS for trial\n    html += '<style id=\"jspsych-survey-likert-css\">';\n    html +=\n      \".jspsych-survey-likert-statement { display:block; font-size: 16px; padding-top: 40px; margin-bottom:10px; }\" +\n      \".jspsych-survey-likert-opts { list-style:none; width:\" +\n      w +\n      \"; margin:auto; padding:0 0 35px; display:block; font-size: 14px; line-height:1.1em; }\" +\n      \".jspsych-survey-likert-opt-label { line-height: 1.1em; color: #444; }\" +\n      \".jspsych-survey-likert-opts:before { content: ''; position:relative; top:11px; /*left:9.5%;*/ display:block; background-color:#efefef; height:4px; width:100%; }\" +\n      \".jspsych-survey-likert-opts:last-of-type { border-bottom: 0; }\" +\n      \".jspsych-survey-likert-opts li { display:inline-block; /*width:19%;*/ text-align:center; vertical-align: top; }\" +\n      \".jspsych-survey-likert-opts li input[type=radio] { display:block; position:relative; top:0; left:50%; margin-left:-6px; }\";\n    html += \"</style>\";\n\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-likert-preamble\" class=\"jspsych-survey-likert-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-likert-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-likert-form\" autocomplete=\"off\">';\n    }\n\n    // add likert scale questions ///\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      // add question\n      html += '<label class=\"jspsych-survey-likert-statement\">' + question.prompt + \"</label>\";\n      // add options\n      var width = 100 / question.labels.length;\n      var options_string =\n        '<ul class=\"jspsych-survey-likert-opts\" data-name=\"' +\n        question.name +\n        '\" data-radio-group=\"Q' +\n        question_order[i] +\n        '\">';\n      for (var j = 0; j < question.labels.length; j++) {\n        options_string +=\n          '<li style=\"width:' +\n          width +\n          '%\"><label class=\"jspsych-survey-likert-opt-label\"><input type=\"radio\" name=\"Q' +\n          question_order[i] +\n          '\" value=\"' +\n          j +\n          '\"';\n        if (question.required) {\n          options_string += \" required\";\n        }\n        options_string += \">\" + question.labels[j] + \"</label></li>\";\n      }\n      options_string += \"</ul>\";\n      html += options_string;\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"jspsych-survey-likert-next\" class=\"jspsych-survey-likert jspsych-btn\" value=\"' +\n      trial.button_label +\n      '\"></input>';\n\n    html += \"</form>\";\n\n    display_element.innerHTML = html;\n\n    display_element.querySelector(\"#jspsych-survey-likert-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      var matches = display_element.querySelectorAll<HTMLFormElement>(\n        \"#jspsych-survey-likert-form .jspsych-survey-likert-opts\"\n      );\n      for (var index = 0; index < matches.length; index++) {\n        var id = matches[index].dataset[\"radioGroup\"];\n        var el = display_element.querySelector<HTMLInputElement>(\n          'input[name=\"' + id + '\"]:checked'\n        );\n        if (el === null) {\n          var response: string | number = \"\";\n        } else {\n          var response: string | number = parseInt(el.value);\n        }\n        var obje = {};\n        if (matches[index].attributes[\"data-name\"].value !== \"\") {\n          var name = matches[index].attributes[\"data-name\"].value;\n        } else {\n          var name = id;\n        }\n        obje[name] = response;\n        Object.assign(question_data, obje);\n      }\n\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      question_data[name] = this.jsPsych.randomization.randomInt(0, q.labels.length - 1);\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `input[type=\"radio\"][name=\"${answers[i][0]}\"][value=\"${answers[i][1]}\"]`\n        ),\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-likert-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyLikertPlugin;\n"],
  "mappings": "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",
  "names": []
}

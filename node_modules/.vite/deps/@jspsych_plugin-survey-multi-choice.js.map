{
  "version": 3,
  "sources": ["../../@jspsych/plugin-survey-multi-choice/src/index.ts"],
  "sourcesContent": ["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"survey-multi-choice\",\n  parameters: {\n    /** Array containing one or more objects with parameters for the question(s) that should be shown on the page. */\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      pretty_name: \"Questions\",\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          pretty_name: \"Prompt\",\n          default: undefined,\n        },\n        /** Array of multiple choice options for this question. */\n        options: {\n          type: ParameterType.STRING,\n          pretty_name: \"Options\",\n          array: true,\n          default: undefined,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Required\",\n          default: false,\n        },\n        /** If true, then the question will be centered and options will be displayed horizontally. */\n        horizontal: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Horizontal\",\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          pretty_name: \"Question Name\",\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Randomize Question Order\",\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Preamble\",\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Allow autocomplete\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-multi-choice**\n *\n * jsPsych plugin for presenting multiple choice survey questions\n *\n * @author Shane Martin\n * @see {@link https://www.jspsych.org/plugins/jspsych-survey-multi-choice/ survey-multi-choice plugin documentation on jspsych.org}\n */\nclass SurveyMultiChoicePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var plugin_id_name = \"jspsych-survey-multi-choice\";\n\n    var html = \"\";\n\n    // inject CSS for trial\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\n    html +=\n      \".jspsych-survey-multi-choice-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }\" +\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n      \".jspsych-survey-multi-choice-option { line-height: 2; }\" +\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\n    html += \"</style>\";\n\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n\n    // form element\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-multi-choice-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-multi-choice-form\" autocomplete=\"off\">';\n    }\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    // add multiple-choice questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      // get question based on question_order\n      var question = trial.questions[question_order[i]];\n      var question_id = question_order[i];\n\n      // create question container\n      var question_classes = [\"jspsych-survey-multi-choice-question\"];\n      if (question.horizontal) {\n        question_classes.push(\"jspsych-survey-multi-choice-horizontal\");\n      }\n\n      html +=\n        '<div id=\"jspsych-survey-multi-choice-' +\n        question_id +\n        '\" class=\"' +\n        question_classes.join(\" \") +\n        '\"  data-name=\"' +\n        question.name +\n        '\">';\n\n      // add question text\n      html += '<p class=\"jspsych-survey-multi-choice-text survey-multi-choice\">' + question.prompt;\n      if (question.required) {\n        html += \"<span class='required'>*</span>\";\n      }\n      html += \"</p>\";\n\n      // create option radio buttons\n      for (var j = 0; j < question.options.length; j++) {\n        // add label and question text\n        var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n        var input_name = \"jspsych-survey-multi-choice-response-\" + question_id;\n        var input_id = \"jspsych-survey-multi-choice-response-\" + question_id + \"-\" + j;\n\n        var required_attr = question.required ? \"required\" : \"\";\n\n        // add radio button container\n        html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n        html += '<label class=\"jspsych-survey-multi-choice-text\" for=\"' + input_id + '\">';\n        html +=\n          '<input type=\"radio\" name=\"' +\n          input_name +\n          '\" id=\"' +\n          input_id +\n          '\" value=\"' +\n          question.options[j] +\n          '\" ' +\n          required_attr +\n          \"></input>\";\n        html += question.options[j] + \"</label>\";\n        html += \"</div>\";\n      }\n\n      html += \"</div>\";\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"' +\n      plugin_id_name +\n      '-next\" class=\"' +\n      plugin_id_name +\n      ' jspsych-btn\"' +\n      (trial.button_label ? ' value=\"' + trial.button_label + '\"' : \"\") +\n      \"></input>\";\n    html += \"</form>\";\n\n    // render\n    display_element.innerHTML = html;\n\n    document.querySelector(\"form\").addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n      for (var i = 0; i < trial.questions.length; i++) {\n        var match = display_element.querySelector(\"#jspsych-survey-multi-choice-\" + i);\n        var id = \"Q\" + i;\n        var val: String;\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\n          val = match.querySelector<HTMLInputElement>(\"input[type=radio]:checked\").value;\n        } else {\n          val = \"\";\n        }\n        var obje = {};\n        var name = id;\n        if (match.attributes[\"data-name\"].value !== \"\") {\n          name = match.attributes[\"data-name\"].value;\n        }\n        obje[name] = val;\n        Object.assign(question_data, obje);\n      }\n      // save data\n      var trial_data = {\n        rt: response_time,\n        response: question_data,\n        question_order: question_order,\n      };\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      question_data[name] = this.jsPsych.randomization.sampleWithoutReplacement(q.options, 1)[0];\n      rt += this.jsPsych.randomization.sampleExGaussian(1500, 400, 1 / 200, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n      question_order: trial.randomize_question_order\n        ? this.jsPsych.randomization.shuffle([...Array(trial.questions.length).keys()])\n        : [...Array(trial.questions.length).keys()],\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response);\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `#jspsych-survey-multi-choice-response-${i}-${trial.questions[i].options.indexOf(\n            answers[i][1]\n          )}`\n        ),\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-multi-choice-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyMultiChoicePlugin;\n"],
  "mappings": "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",
  "names": ["i"]
}

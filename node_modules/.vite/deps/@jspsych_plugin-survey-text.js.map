{
  "version": 3,
  "sources": ["../../@jspsych/plugin-survey-text/src/index.ts"],
  "sourcesContent": ["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"survey-text\",\n  parameters: {\n    questions: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      pretty_name: \"Questions\",\n      default: undefined,\n      nested: {\n        /** Question prompt. */\n        prompt: {\n          type: ParameterType.HTML_STRING,\n          pretty_name: \"Prompt\",\n          default: undefined,\n        },\n        /** Placeholder text in the response text box. */\n        placeholder: {\n          type: ParameterType.STRING,\n          pretty_name: \"Placeholder\",\n          default: \"\",\n        },\n        /** The number of rows for the response text box. */\n        rows: {\n          type: ParameterType.INT,\n          pretty_name: \"Rows\",\n          default: 1,\n        },\n        /** The number of columns for the response text box. */\n        columns: {\n          type: ParameterType.INT,\n          pretty_name: \"Columns\",\n          default: 40,\n        },\n        /** Whether or not a response to this question must be given in order to continue. */\n        required: {\n          type: ParameterType.BOOL,\n          pretty_name: \"Required\",\n          default: false,\n        },\n        /** Name of the question in the trial data. If no name is given, the questions are named Q0, Q1, etc. */\n        name: {\n          type: ParameterType.STRING,\n          pretty_name: \"Question Name\",\n          default: \"\",\n        },\n      },\n    },\n    /** If true, the order of the questions in the 'questions' array will be randomized. */\n    randomize_question_order: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Randomize Question Order\",\n      default: false,\n    },\n    /** HTML-formatted string to display at top of the page above all of the questions. */\n    preamble: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Preamble\",\n      default: null,\n    },\n    /** Label of the button to submit responses. */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n    },\n    /** Setting this to true will enable browser auto-complete or auto-fill for the form. */\n    autocomplete: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Allow autocomplete\",\n      default: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **survey-text**\n *\n * jsPsych plugin for free text response survey questions\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-survey-text/ survey-text plugin documentation on jspsych.org}\n */\nclass SurveyTextPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].rows == \"undefined\") {\n        trial.questions[i].rows = 1;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].columns == \"undefined\") {\n        trial.questions[i].columns = 40;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].value == \"undefined\") {\n        trial.questions[i].value = \"\";\n      }\n    }\n\n    var html = \"\";\n    // show preamble text\n    if (trial.preamble !== null) {\n      html +=\n        '<div id=\"jspsych-survey-text-preamble\" class=\"jspsych-survey-text-preamble\">' +\n        trial.preamble +\n        \"</div>\";\n    }\n    // start form\n    if (trial.autocomplete) {\n      html += '<form id=\"jspsych-survey-text-form\">';\n    } else {\n      html += '<form id=\"jspsych-survey-text-form\" autocomplete=\"off\">';\n    }\n    // generate question order\n    var question_order = [];\n    for (var i = 0; i < trial.questions.length; i++) {\n      question_order.push(i);\n    }\n    if (trial.randomize_question_order) {\n      question_order = this.jsPsych.randomization.shuffle(question_order);\n    }\n\n    // add questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      var question_index = question_order[i];\n      html +=\n        '<div id=\"jspsych-survey-text-' +\n        question_index +\n        '\" class=\"jspsych-survey-text-question\" style=\"margin: 2em 0em;\">';\n      html += '<p class=\"jspsych-survey-text\">' + question.prompt + \"</p>\";\n      var autofocus = i == 0 ? \"autofocus\" : \"\";\n      var req = question.required ? \"required\" : \"\";\n      if (question.rows == 1) {\n        html +=\n          '<input type=\"text\" id=\"input-' +\n          question_index +\n          '\"  name=\"#jspsych-survey-text-response-' +\n          question_index +\n          '\" data-name=\"' +\n          question.name +\n          '\" size=\"' +\n          question.columns +\n          '\" ' +\n          autofocus +\n          \" \" +\n          req +\n          ' placeholder=\"' +\n          question.placeholder +\n          '\"></input>';\n      } else {\n        html +=\n          '<textarea id=\"input-' +\n          question_index +\n          '\" name=\"#jspsych-survey-text-response-' +\n          question_index +\n          '\" data-name=\"' +\n          question.name +\n          '\" cols=\"' +\n          question.columns +\n          '\" rows=\"' +\n          question.rows +\n          '\" ' +\n          autofocus +\n          \" \" +\n          req +\n          ' placeholder=\"' +\n          question.placeholder +\n          '\"></textarea>';\n      }\n      html += \"</div>\";\n    }\n\n    // add submit button\n    html +=\n      '<input type=\"submit\" id=\"jspsych-survey-text-next\" class=\"jspsych-btn jspsych-survey-text\" value=\"' +\n      trial.button_label +\n      '\"></input>';\n\n    html += \"</form>\";\n    display_element.innerHTML = html;\n\n    // backup in case autofocus doesn't work\n    display_element.querySelector<HTMLInputElement>(\"#input-\" + question_order[0]).focus();\n\n    display_element.querySelector(\"#jspsych-survey-text-form\").addEventListener(\"submit\", (e) => {\n      e.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = Math.round(endTime - startTime);\n\n      // create object to hold responses\n      var question_data = {};\n\n      for (var index = 0; index < trial.questions.length; index++) {\n        var id = \"Q\" + index;\n        var q_element = document\n          .querySelector(\"#jspsych-survey-text-\" + index)\n          .querySelector(\"textarea, input\") as HTMLInputElement;\n        var val = q_element.value;\n        var name = q_element.attributes[\"data-name\"].value;\n        if (name == \"\") {\n          name = id;\n        }\n        var obje = {};\n        obje[name] = val;\n        Object.assign(question_data, obje);\n      }\n      // save data\n      var trialdata = {\n        rt: response_time,\n        response: question_data,\n      };\n\n      display_element.innerHTML = \"\";\n\n      // next trial\n      this.jsPsych.finishTrial(trialdata);\n    });\n\n    var startTime = performance.now();\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const question_data = {};\n    let rt = 1000;\n\n    for (const q of trial.questions) {\n      const name = q.name ? q.name : `Q${trial.questions.indexOf(q)}`;\n      const ans_words =\n        q.rows == 1\n          ? this.jsPsych.randomization.sampleExponential(0.25)\n          : this.jsPsych.randomization.randomInt(1, 10) * q.rows;\n      question_data[name] = this.jsPsych.randomization.randomWords({\n        exactly: ans_words,\n        join: \" \",\n      });\n      rt += this.jsPsych.randomization.sampleExGaussian(2000, 400, 0.004, true);\n    }\n\n    const default_data = {\n      response: question_data,\n      rt: rt,\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    const answers = Object.entries(data.response).map((x) => {\n      return x[1] as string;\n    });\n    for (let i = 0; i < answers.length; i++) {\n      this.jsPsych.pluginAPI.fillTextInput(\n        display_element.querySelector(`#input-${i}`),\n        answers[i],\n        ((data.rt - 1000) / answers.length) * (i + 1)\n      );\n    }\n\n    this.jsPsych.pluginAPI.clickTarget(\n      display_element.querySelector(\"#jspsych-survey-text-next\"),\n      data.rt\n    );\n  }\n}\n\nexport default SurveyTextPlugin;\n"],
  "mappings": "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",
  "names": []
}

import {
  ParameterType
} from "./chunk-SZOXG56G.js";

// node_modules/@jspsych/plugin-html-button-response/dist/index.js
var info = {
  name: "html-button-response",
  parameters: {
    /** The HTML string to be displayed */
    stimulus: {
      type: ParameterType.HTML_STRING,
      pretty_name: "Stimulus",
      default: void 0
    },
    /** Array containing the label(s) for the button(s). */
    choices: {
      type: ParameterType.STRING,
      pretty_name: "Choices",
      default: void 0,
      array: true
    },
    /** The HTML for creating button. Can create own style. Use the "%choice%" string to indicate where the label from the choices parameter should be inserted. */
    button_html: {
      type: ParameterType.HTML_STRING,
      pretty_name: "Button HTML",
      default: '<button class="jspsych-btn">%choice%</button>',
      array: true
    },
    /** Any content here will be displayed under the button(s). */
    prompt: {
      type: ParameterType.HTML_STRING,
      pretty_name: "Prompt",
      default: null
    },
    /** How long to show the stimulus. */
    stimulus_duration: {
      type: ParameterType.INT,
      pretty_name: "Stimulus duration",
      default: null
    },
    /** How long to show the trial. */
    trial_duration: {
      type: ParameterType.INT,
      pretty_name: "Trial duration",
      default: null
    },
    /** The vertical margin of the button. */
    margin_vertical: {
      type: ParameterType.STRING,
      pretty_name: "Margin vertical",
      default: "0px"
    },
    /** The horizontal margin of the button. */
    margin_horizontal: {
      type: ParameterType.STRING,
      pretty_name: "Margin horizontal",
      default: "8px"
    },
    /** If true, then trial will end when user responds. */
    response_ends_trial: {
      type: ParameterType.BOOL,
      pretty_name: "Response ends trial",
      default: true
    }
  }
};
var HtmlButtonResponsePlugin = class {
  constructor(jsPsych) {
    this.jsPsych = jsPsych;
  }
  trial(display_element, trial) {
    var html = '<div id="jspsych-html-button-response-stimulus">' + trial.stimulus + "</div>";
    var buttons = [];
    if (Array.isArray(trial.button_html)) {
      if (trial.button_html.length == trial.choices.length) {
        buttons = trial.button_html;
      } else {
        console.error("Error in html-button-response plugin. The length of the button_html array does not equal the length of the choices array");
      }
    } else {
      for (var i = 0; i < trial.choices.length; i++) {
        buttons.push(trial.button_html);
      }
    }
    html += '<div id="jspsych-html-button-response-btngroup">';
    for (var i = 0; i < trial.choices.length; i++) {
      var str = buttons[i].replace(/%choice%/g, trial.choices[i]);
      html += '<div class="jspsych-html-button-response-button" style="display: inline-block; margin:' + trial.margin_vertical + " " + trial.margin_horizontal + '" id="jspsych-html-button-response-button-' + i + '" data-choice="' + i + '">' + str + "</div>";
    }
    html += "</div>";
    if (trial.prompt !== null) {
      html += trial.prompt;
    }
    display_element.innerHTML = html;
    var start_time = performance.now();
    for (var i = 0; i < trial.choices.length; i++) {
      display_element.querySelector("#jspsych-html-button-response-button-" + i).addEventListener("click", (e) => {
        var btn_el = e.currentTarget;
        var choice = btn_el.getAttribute("data-choice");
        after_response(choice);
      });
    }
    var response = {
      rt: null,
      button: null
    };
    const end_trial = () => {
      this.jsPsych.pluginAPI.clearAllTimeouts();
      var trial_data = {
        rt: response.rt,
        stimulus: trial.stimulus,
        response: response.button
      };
      display_element.innerHTML = "";
      this.jsPsych.finishTrial(trial_data);
    };
    function after_response(choice) {
      var end_time = performance.now();
      var rt = Math.round(end_time - start_time);
      response.button = parseInt(choice);
      response.rt = rt;
      display_element.querySelector("#jspsych-html-button-response-stimulus").className += " responded";
      var btns = document.querySelectorAll(".jspsych-html-button-response-button button");
      for (var i2 = 0; i2 < btns.length; i2++) {
        btns[i2].setAttribute("disabled", "disabled");
      }
      if (trial.response_ends_trial) {
        end_trial();
      }
    }
    if (trial.stimulus_duration !== null) {
      this.jsPsych.pluginAPI.setTimeout(() => {
        display_element.querySelector("#jspsych-html-button-response-stimulus").style.visibility = "hidden";
      }, trial.stimulus_duration);
    }
    if (trial.trial_duration !== null) {
      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);
    }
  }
  simulate(trial, simulation_mode, simulation_options, load_callback) {
    if (simulation_mode == "data-only") {
      load_callback();
      this.simulate_data_only(trial, simulation_options);
    }
    if (simulation_mode == "visual") {
      this.simulate_visual(trial, simulation_options, load_callback);
    }
  }
  create_simulation_data(trial, simulation_options) {
    const default_data = {
      stimulus: trial.stimulus,
      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),
      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1)
    };
    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);
    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);
    return data;
  }
  simulate_data_only(trial, simulation_options) {
    const data = this.create_simulation_data(trial, simulation_options);
    this.jsPsych.finishTrial(data);
  }
  simulate_visual(trial, simulation_options, load_callback) {
    const data = this.create_simulation_data(trial, simulation_options);
    const display_element = this.jsPsych.getDisplayElement();
    this.trial(display_element, trial);
    load_callback();
    if (data.rt !== null) {
      this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(`div[data-choice="${data.response}"] button`), data.rt);
    }
  }
};
HtmlButtonResponsePlugin.info = info;
export {
  HtmlButtonResponsePlugin as default
};
//# sourceMappingURL=@jspsych_plugin-html-button-response.js.map
